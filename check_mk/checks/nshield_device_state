#!/usr/bin/python

# OIDs used:
# NCIPHER-MIB::hardserverRunning.0                  .1.3.6.1.4.1.7682.2.50.1.0
# NCIPHER-MIB::noOfModules.0                        .1.3.6.1.4.1.7682.2.50.2.0
# NCIPHER-MIB::modulesFailed.0                      .1.3.6.1.4.1.7682.2.2.0
# NCIPHER-MIB::mode.x                               .1.3.6.1.4.1.7682.2.50.50.1.2.x
# NCIPHER-MIB::moduleSWState.x                      .1.3.6.1.4.1.7682.2.50.50.1.15.x
# Scan function looks for Enterprise 'THALES-PAYSHIELD' OID .1.3.6.1.4.1.7682 and if it exists we continue

# Author: Rolf Koch - rolf.koch@netcetera.com - http://netcetera.com

def inventory_nshield_device_state(info):
        yield 'nShield hardserver', None
        yield 'nShield Number of Modules', None
        yield 'nShield Modules', None
        for checkname, value  in enumerate(info[0]):
            if value[1] > 0:
                y = int(value[1])
                for x in xrange(1, y+1):
                    yield 'nShield Module #%s' %x, None		


def check_nshield_device_state(item, _no_params, info):
    for checkname, value  in enumerate(info[0]):
        if 'nShield hardserver' in item:
            if value[0] == "1":
                return (0, "OK - %s - Running" % item) 
            else:
                return (2, "CRIT - %s - not Running" % item )
        elif 'nShield Number of Modules' in item:
            if value[1] == "0":
                return (2, "CRIT - %s - is %s" % (item,value[1]) )
            elif value[1] >= "1":
                return (0, "OK - %s - is %s" % (item,value[1]) )
            else:
                return (1, "WARN - %s - is a strange value %s" % (item,value[1]) )
        elif 'nShield Modules' in item:
            if value[2] == "2":
                return (0, "OK - %s: OK" % item) 
            else:
                return (2, "CRIT - %s: FAILED" % item )
        if value[1] > 0:
            y = int(value[1])
            for x in range(1, y+1):
                if 'nShield Module #%s' %x in item:
                    mode = { "1":"Operational", "2":"preinit", "3":"init", "4":"premaint", "5":"maint", "6":"accelonly", "7":"failed", "8":"unknown", }
                    state =  {"2": "usable","3": "maintmode","4": "uninitialized","5": "factory","6": "foreign","7": "accelonly","8": "failed","9": "unchecked","10": "initmode","11": "preinitmode","12": "outofrange",} 
                    modulemode = mode[value[2*x+1]]
                    modulestate = state[value[2*x+2]]
		    if modulemode == "Operational" and modulestate == "usable":
			state=0
                    else:
			state=2
                    return (state, "Module %s is in mode %s and state %s" % (x, modulemode, modulestate) )


check_info["nshield_device_state"] = {
    "check_function"        : check_nshield_device_state,
    "inventory_function"    : inventory_nshield_device_state,
    "service_description"   : "%s",
    "has_perfdata"          : False,
    "snmp_scan_function"    : lambda oid:  oid(".1.3.6.1.4.1.7682") != None ,
    "snmp_info"             : [( ".1.3.6.1.4.1.7682.2", [
                                  "50.1.0",      # hardserverRunning.0
                                  "50.2.0",      # noOfModules.0
                                  "2.0",         # modulesFailed.0
                                  "50.50.1.2.*", # mode.x
                                  "50.50.1.15.*" # moduleSWState.x
                              ])],
}

